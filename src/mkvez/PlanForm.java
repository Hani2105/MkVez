/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mkvez;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.joda.time.DateTime;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.xml.parsers.ParserConfigurationException;
import org.joda.time.Minutes;
import org.joda.time.format.DateTimeFormat;
import org.xml.sax.SAXException;

/**
 *
 * @author krisztian_csekme1
 */
public class PlanForm extends javax.swing.JPanel {

    private String linename = null;
    private DateTime MA = new DateTime();
    private boolean construct = true;
    private boolean MAILSEND = false;
    private String refreshstring = "";

    public void setLineName(String name) {
        this.linename = name;
    }

    public String getLineName() {
        return this.linename;
    }

    /**
     * Creates new form PlanForm
     */
    public PlanForm() {
        initComponents();
        TAB.addKeyListener(new ClipboardKeyAdapter(TAB));
        /*
         Gyártási Év Combobox inicializálása és előválasztása
         */
        int begening = 2015;

        for (int i = begening; i < new DateTime().getYear() + 2; i++) {
            COMBO_YEAR.addItem((Object) i);
        }

        COMBO_YEAR.setSelectedItem(new DateTime().getYear());

        /*
         Gyártási Hét Combobox inicializáslása és előválasztása
         */
        for (int i = 0; i < 53; i++) {
            COMBO_WEEK.addItem(i + 1);
        }

        COMBO_WEEK.setSelectedIndex(new DateTime().getWeekOfWeekyear() - 1);

        TAB.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("tableCellEditor")) {
                    if (TAB.isEditing()) {

                    } else {
                        sumcalc();
                        beir();
                    }
                }
            }
        });

        /*
         Műszakvezetői modul inicializálása
         */
        //Állásidő kategóriák
        COMBO_DOWNTIME.setModel(new DefaultComboBoxModel(MkVez.ALLAS_KATEGORIA));

        COMBO_DAYS.setModel(new DefaultComboBoxModel(MkVez.NAP_NEVEK));
        COMBO_DAYS.setSelectedIndex(MA.getDayOfWeek() - 1);

        COMBO_SHIFT.setModel(new DefaultComboBoxModel(MkVez.MUSZAK_NEVEK));
        int HOUR = MA.getHourOfDay();

        if (HOUR >= 6 && HOUR < 18) {
            COMBO_SHIFT.setSelectedIndex(0);
        } else if ((HOUR >= 18 && HOUR <= 23) || (HOUR >= 0 && HOUR < 6)) {
            COMBO_SHIFT.setSelectedIndex(1);
        }

        for (int m = 0; m < 60; m++) {
            COMBO_FROM_MIN.addItem(String.format("%02d", m));
            COMBO_TO_MIN.addItem(String.format("%02d", m));

        }

        MAIL_BODY.setContentType("text/html");

        construct = false;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        POPDOWN = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        CH_FAMILY = new javax.swing.JCheckBox();
        CH_STARTUP = new javax.swing.JCheckBox();
        CH_DBPQTY = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        LBL_REF = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        COMBO_YEAR = new javax.swing.JComboBox();
        COMBO_WEEK = new javax.swing.JComboBox();
        BTN_QUERY = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        jButton8 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        QS = new javax.swing.JTextField();
        LBL_LINE = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        TAB = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        TAB_SFDC = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        PANELMKVEZ = new javax.swing.JPanel();
        MKVEZ_JOBB = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        COMBO_DAYS = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        COMBO_SHIFT = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        BTN_MAIL = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        MAIL_BODY = new javax.swing.JEditorPane();
        jButton15 = new javax.swing.JButton();
        MKVEZ_BAL = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        COMBO_DOWNTIME = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        COMBO_FROM_H = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        COMBO_FROM_MIN = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        COMBO_TO_H = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        COMBO_TO_MIN = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        TXT_FIXED = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TEXT_COMMENT = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TAB_ALLASOK = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        RIPORT = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();

        jMenuItem1.setText("Törlés");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        POPDOWN.add(jMenuItem1);

        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Oszlopok:"));

        CH_FAMILY.setText("Termékcsalád");
        CH_FAMILY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CH_FAMILYMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CH_FAMILYMouseReleased(evt);
            }
        });
        CH_FAMILY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CH_FAMILYActionPerformed(evt);
            }
        });

        CH_STARTUP.setText("Tárazás");
        CH_STARTUP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CH_STARTUPMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CH_STARTUPMouseReleased(evt);
            }
        });
        CH_STARTUP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CH_STARTUPActionPerformed(evt);
            }
        });

        CH_DBPQTY.setText("Darab / Óra");
        CH_DBPQTY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CH_DBPQTYMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CH_DBPQTYMouseReleased(evt);
            }
        });
        CH_DBPQTY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CH_DBPQTYActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CH_FAMILY)
                    .addComponent(CH_STARTUP)
                    .addComponent(CH_DBPQTY))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(CH_FAMILY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CH_DBPQTY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CH_STARTUP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LBL_REF.setText("Utolsó tervváltozás:");

        jLabel2.setText("Gyártási év:");

        jLabel1.setText("Gyártási hét:");

        COMBO_WEEK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                COMBO_WEEKActionPerformed(evt);
            }
        });

        BTN_QUERY.setText("Lekérdez");
        BTN_QUERY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_QUERYActionPerformed(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/window_close24.png"))); // NOI18N
        jLabel15.setToolTipText("Bezár");
        jLabel15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(LBL_REF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(COMBO_WEEK, 0, 93, Short.MAX_VALUE)
                            .addComponent(COMBO_YEAR, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(BTN_QUERY))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LBL_REF)
                    .addComponent(jLabel15))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(COMBO_YEAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(COMBO_WEEK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BTN_QUERY)
                        .addContainerGap())))
        );

        jToolBar3.setFloatable(false);
        jToolBar3.setRollover(true);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/printer16.png"))); // NOI18N
        jButton8.setToolTipText("Terv nyomtatása...");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton8);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/find.png"))); // NOI18N

        QS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                QSKeyReleased(evt);
            }
        });

        LBL_LINE.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LBL_LINE.setText("Terv: ");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(LBL_LINE, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(QS))))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LBL_LINE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(QS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );

        jSplitPane1.setDividerLocation(320);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        TAB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TAB.setColumnSelectionAllowed(true);
        TAB.setDoubleBuffered(true);
        TAB.getTableHeader().setReorderingAllowed(false);
        TAB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TABMouseExited(evt);
            }
        });
        jScrollPane3.setViewportView(TAB);

        jTabbedPane1.addTab("Terv", jScrollPane3);

        TAB_SFDC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(TAB_SFDC);

        jTabbedPane1.addTab("SFDC", jScrollPane8);

        jSplitPane1.setLeftComponent(jTabbedPane1);

        PANELMKVEZ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PANELMKVEZMouseEntered(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Műszak:"));

        jLabel13.setText("Nap:");

        COMBO_DAYS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                COMBO_DAYSActionPerformed(evt);
            }
        });

        jLabel14.setText("Műszak:");

        COMBO_SHIFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                COMBO_SHIFTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(COMBO_DAYS, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(COMBO_SHIFT, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(287, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(COMBO_DAYS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(COMBO_SHIFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Műszakjelentés:"));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/refresh.png"))); // NOI18N
        jButton3.setToolTipText("Frissítés");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        BTN_MAIL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/mail.png"))); // NOI18N
        BTN_MAIL.setToolTipText("Műszakjelentés küldése");
        BTN_MAIL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_MAILActionPerformed(evt);
            }
        });

        jScrollPane7.setViewportView(MAIL_BODY);

        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/sanm16.png"))); // NOI18N
        jButton15.setToolTipText("SFDC");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_MAIL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(BTN_MAIL)
                    .addComponent(jButton15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7))
        );

        javax.swing.GroupLayout MKVEZ_JOBBLayout = new javax.swing.GroupLayout(MKVEZ_JOBB);
        MKVEZ_JOBB.setLayout(MKVEZ_JOBBLayout);
        MKVEZ_JOBBLayout.setHorizontalGroup(
            MKVEZ_JOBBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MKVEZ_JOBBLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(MKVEZ_JOBBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        MKVEZ_JOBBLayout.setVerticalGroup(
            MKVEZ_JOBBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MKVEZ_JOBBLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Állásidő felvétel:"));
        jPanel4.setMaximumSize(new java.awt.Dimension(673, 1968));

        jLabel4.setText("Állásidő típusa:");

        jLabel5.setText("Kezdete:");

        jLabel6.setText("Óra");

        jLabel7.setText("Perc");

        jLabel8.setText("Vége:");

        jLabel9.setText("Óra");

        jLabel10.setText("Perc");

        jLabel11.setText("Javította:");

        jLabel12.setText("Komment:");

        TEXT_COMMENT.setColumns(20);
        TEXT_COMMENT.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TEXT_COMMENT.setLineWrap(true);
        TEXT_COMMENT.setRows(5);
        jScrollPane4.setViewportView(TEXT_COMMENT);

        jButton1.setText("Felvétel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/plus.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/minus.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/plus.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/minus.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/font_inc.png"))); // NOI18N
        jButton9.setToolTipText("Betűméret növelése");
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/font_dec.png"))); // NOI18N
        jButton10.setToolTipText("Betűméret csökkentése");
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton10);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/clear.png"))); // NOI18N
        jButton11.setToolTipText("Szöveg törlése");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(COMBO_DOWNTIME, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(COMBO_TO_H, javax.swing.GroupLayout.Alignment.LEADING, 0, 56, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(COMBO_FROM_H, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(COMBO_TO_MIN, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(COMBO_FROM_MIN, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7))))
                            .addComponent(jLabel8)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TXT_FIXED, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addGap(0, 0, 0))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(COMBO_DOWNTIME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(COMBO_FROM_H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(COMBO_FROM_MIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(COMBO_TO_H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(COMBO_TO_MIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10))
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TXT_FIXED)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Felvett állásidők:"));
        jPanel5.setMaximumSize(new java.awt.Dimension(673, 32767));

        TAB_ALLASOK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TAB_ALLASOK.setComponentPopupMenu(POPDOWN);
        jScrollPane5.setViewportView(TAB_ALLASOK);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Műszakvezetői komment:"));
        jPanel7.setMaximumSize(new java.awt.Dimension(673, 32767));

        RIPORT.setColumns(20);
        RIPORT.setLineWrap(true);
        RIPORT.setRows(5);
        jScrollPane6.setViewportView(RIPORT);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/save.png"))); // NOI18N
        jButton2.setToolTipText("Mentés");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/font_inc.png"))); // NOI18N
        jButton12.setToolTipText("Betűméret növelése");
        jButton12.setFocusable(false);
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton12);

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/font_dec.png"))); // NOI18N
        jButton13.setToolTipText("Betűméret csökkentése");
        jButton13.setFocusable(false);
        jButton13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton13);

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mkvez/IMG/clear.png"))); // NOI18N
        jButton14.setToolTipText("Szöveg törlése");
        jButton14.setFocusable(false);
        jButton14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton14.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton14);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout MKVEZ_BALLayout = new javax.swing.GroupLayout(MKVEZ_BAL);
        MKVEZ_BAL.setLayout(MKVEZ_BALLayout);
        MKVEZ_BALLayout.setHorizontalGroup(
            MKVEZ_BALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MKVEZ_BALLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(MKVEZ_BALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        MKVEZ_BALLayout.setVerticalGroup(
            MKVEZ_BALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MKVEZ_BALLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout PANELMKVEZLayout = new javax.swing.GroupLayout(PANELMKVEZ);
        PANELMKVEZ.setLayout(PANELMKVEZLayout);
        PANELMKVEZLayout.setHorizontalGroup(
            PANELMKVEZLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PANELMKVEZLayout.createSequentialGroup()
                .addComponent(MKVEZ_BAL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(MKVEZ_JOBB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        PANELMKVEZLayout.setVerticalGroup(
            PANELMKVEZLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PANELMKVEZLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(PANELMKVEZLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MKVEZ_JOBB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MKVEZ_BAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(PANELMKVEZ);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1135, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1150, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void hideColumn(int col, JTable table) {
        if (table.getColumnCount() > col) {
            table.getColumnModel().getColumn(col).setWidth(0);
            table.getColumnModel().getColumn(col).setPreferredWidth(0);
            table.getColumnModel().getColumn(col).setMinWidth(0);
            table.getColumnModel().getColumn(col).setMaxWidth(0);
        }
    }

    public void showColumn(int col, int width, JTable table) {
        if (table.getColumnCount() > col) {
            table.getColumnModel().getColumn(col).setWidth(width);
            table.getColumnModel().getColumn(col).setPreferredWidth(width);
            table.getColumnModel().getColumn(col).setMinWidth(width);
            table.getColumnModel().getColumn(col).setMaxWidth(width * 2);
        }
    }

    public void setHeaderName(int col, String name, JTable table) {
        if (table.getColumnCount() > col) {
            table.getColumnModel().getColumn(col).setHeaderValue(name);

        }
    }

    public DateTime getShiftDate(int col) {

        DateTime dt = MkVez.getFirstMondayDayOfWeek(Integer.parseInt(COMBO_YEAR.getSelectedItem().toString()), COMBO_WEEK.getSelectedIndex() + 1).plusHours(5);

        int noOfmuszak = col - 13;

        dt = dt.plusHours(noOfmuszak * 12);

        return dt;
    }

    public void beir() {

        int row = TAB.getSelectedRow();
        int col = TAB.getSelectedColumn();

        if ((col >= 13) && (col < 28)) {

            if (TAB.getValueAt(row, 12).toString().equals("Tény")) {
                String query = "";
                String teny = TAB.getValueAt(row, col).toString();
                String prod_id = TAB.getValueAt(row, 0).toString();
                String job = TAB.getValueAt(row, 1).toString();
                String partnumber = TAB.getValueAt(row, 2).toString();
                String seq = TAB.getValueAt(row, 6).toString();
                String stationid = TAB.getValueAt(row, 4).toString();
                String startdate = MkVez.formatDate(getShiftDate(col));

                String getquery = "SELECT * FROM " + MkVez.PLANTABLENAME + " WHERE prod_id='" + prod_id + "' and job='" + job + "' and partnumber='" + partnumber + "' and seq=" + seq + " and stationid=" + stationid + ";";
                Object[] record = MkVez.MYDB_DB.getRecord(getquery);

                //prod_id
                Object _prod_id = record[1];
                //job
                Object _job = record[2];
                //partnumber
                Object _partnumber = record[3];
                //seq
                Object _seq = record[4];
                //stationid
                Object _stationid = record[5];
                //startdate
                Object _startdate = record[6];
                //qty_terv
                Object _qty_terv = record[7];
                //qty_teny
                Object _qty_teny = record[8];
                //startup
                Object _startup = record[9];
                //qty_p_hour
                Object _qty_p_hour = record[10];
                //qty_full
                Object _qty_full = record[11];
                //comments
                Object _comments = record[12];
                //active
                Object _active = record[13];
                //waterfall
                Object _waterfall = record[14];
                //mernoki
                Object _mernoki = record[15];

                if (!(teny.length() > 0)) {
                    teny = "0";
                }

                String insertquery = "INSERT INTO " + MkVez.PLANTABLENAME + " ("
                        + "prod_id,"
                        + "job,"
                        + "partnumber,"
                        + "seq,"
                        + "stationid,"
                        + "startdate,"
                        + "qty_terv,"
                        + "qty_teny,"
                        + "startup,"
                        + "qty_p_hour,"
                        + "qty_full,"
                        + "comments,"
                        + "active,"
                        + "waterfall,"
                        + "mernoki"
                        + ") VALUES ("
                        + "'" + _prod_id + "',"
                        + "'" + _job + "',"
                        + "'" + _partnumber + "',"
                        + _seq + ","
                        + _stationid + ","
                        + "'" + startdate + "',"
                        + "0" + ","
                        + //terv    
                        teny + ","
                        + _startup + ","
                        + _qty_p_hour + ","
                        + _qty_full + ","
                        + "''" + ","
                        + "1" + ","
                        + _waterfall + ","
                        + _mernoki
                        + ") ON DUPLICATE KEY ";

                query += insertquery + " UPDATE qty_teny=" + teny + ",active=1;";

                MkVez.MYDB_DB.insertCommand(query);

            } else {

            }
        }

    }

    ActionListener refresh = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            String ref = "";
            try {
                ref = MkVez.MYDB_DB.getCellValue("SELECT refresh from stations where name='" + getName() + "';").toString();
                LBL_REF.setText("Utolsó tervváltozás: " + ref);
            } catch (Exception w) {

            }

            int index = 0;
            for (int i = 0; i < MkVez.MW.TABBED.getTabCount(); i++) {
                if (MkVez.MW.TABBED.getTitleAt(i).equals(getName().toUpperCase())) {
                    index = i;
                }
            }

            try {
                if (!ref.equals(refreshstring)) {
                    MkVez.MW.TABBED.setIconAt(index, new ImageIcon(mkvez.MkVez.class.getResource("IMG/attention.png")));
                } else {
                    MkVez.MW.TABBED.setIconAt(index, null);
                }
            } catch (Exception ee) {

            }
        }
    };

    @Override
    public void setVisible(boolean value) {

        LBL_LINE.setText("Terv: " + getName().toUpperCase());
        String ref;
        try {
            ref = MkVez.MYDB_DB.getCellValue("SELECT refresh from stations where name='" + getName() + "';").toString();
            refreshstring = ref;
            LBL_REF.setText("Utolsó tervváltozás: " + ref);
        } catch (Exception w) {

        }
        super.setVisible(value);
        Timer timer = new Timer(8000, refresh);
        timer.start();

    }

    public void setTheme() {
        try {
            //((DefaultCellEditor) TAB.getDefaultEditor(Object.class)).setClickCountToStart(1);
            //DefaultCellEditor onClick = (DefaultCellEditor)TAB.getDefaultEditor(Object.class);
            //onClick.setClickCountToStart(1);
            TAB.getTableHeader().setPreferredSize(new Dimension(jScrollPane3.getWidth(), 40));
            JTableHeader header = TAB.getTableHeader();
            DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) header.getDefaultRenderer();
            renderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

            for (int i = 0; i < TAB.getColumnCount(); i++) {
                if (i == 5) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("Oldal");
                }

                if (i == 11) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Teljes<br>terv</html>");
                }

                if (i == 12) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Terv<br>Tény</html>");
                }
                if (i == 13) {

                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Hétfő<br>Reggel</html>");

                }
                if (i == 14) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Hétfő<br>Délután</html>");
                }
                if (i == 15) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Kedd<br>Reggel</html>");
                }
                if (i == 16) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Kedd<br>Délután</html>");
                }
                if (i == 17) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Szerda<br>Reggel</html>");
                }
                if (i == 18) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Szerda<br>Délután</html>");
                }
                if (i == 19) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Csütörtök<br>Reggel</html>");
                }
                if (i == 20) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Csütörtök<br>Délután</html>");
                }
                if (i == 21) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Péntek<br>Reggel</html>");
                }
                if (i == 22) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Péntek<br>Délután</html>");
                }
                if (i == 23) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Szombat<br>Reggel</html>");
                }
                if (i == 24) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Szombat<br>Délután</html>");
                }
                if (i == 25) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Vasárnap<br>Reggel</html>");
                }
                if (i == 26) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Vasárnap<br>Délután</html>");
                }
                if (i == 27) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("<html>Hétfő<br>Reggel</html>");
                }

                if (i == 29) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("Kiszállítás");
                }
                if (i == 30) {
                    TAB.getColumnModel().getColumn(i).setHeaderValue("Szumma");
                }

                //for (int i = 12; i < 26; i++) {
                if ((i >= 13) && (i < 28)) {

                    TAB.getColumnModel().getColumn(i).setCellRenderer(new own_plan_tablecell_renderer());
                    own_plan_cell_edit onClick = new own_plan_cell_edit();
                    onClick.setClickCountToStart(1);
                    TAB.getColumnModel().getColumn(i).setCellEditor(onClick);

                } else {
                    JTextField readonly = new JTextField();
                    readonly.setEditable(false);
                    readonly.setEnabled(false);
                    DefaultCellEditor roCell = new DefaultCellEditor(readonly);
                    TAB.getColumnModel().getColumn(i).setCellEditor(roCell);
                }

                if (i == 7) {
                    own_plan_cell_edit onClick = new own_plan_cell_edit();
                    onClick.setClickCountToStart(1);

                    TAB.getColumnModel().getColumn(i).setCellRenderer(new own_plan_tablecell_rendererTooltip());
                    showColumn(i, 80, TAB);
                }

                if (i == 3) {
                    TAB.getColumnModel().getColumn(i).setCellRenderer(new own_plan_tablecell_renderer_align(own_plan_tablecell_renderer_align.align.CENTER));
                    showColumn(i, 50, TAB);
                }

                if (i == 5) {
                    TAB.getColumnModel().getColumn(i).setCellRenderer(new own_plan_tablecell_renderer_align(own_plan_tablecell_renderer_align.align.CENTER));
                    showColumn(i, 50, TAB);
                }
                if (i == 11) {
                    TAB.getColumnModel().getColumn(i).setCellRenderer(new own_plan_tablecell_renderer_align(own_plan_tablecell_renderer_align.align.CENTER));
                    showColumn(i, 50, TAB);
                }
                if (i == 12) {
                    TAB.getColumnModel().getColumn(i).setCellRenderer(new own_plan_tablecell_renderer_align(own_plan_tablecell_renderer_align.align.CENTER));
                    showColumn(i, 50, TAB);
                }
                //JOB szám
                if (i == 1) {
                    showColumn(i, 100, TAB);
                }
                //Partnumber
                if (i == 2) {
                    showColumn(i, 120, TAB);
                }

            }
            //summa
            TAB.getColumnModel().getColumn(30).setCellRenderer(new own_plan_tablecell_rendererSUM());

            //Kiszállítási szint
            TAB.getColumnModel().getColumn(29).setCellRenderer(new own_plan_tablecell_renderer_out());
            showColumn(29, 50, TAB);

            hideColumn(0, TAB); //Prod_ID
            hideColumn(4, TAB); //station_id
            hideColumn(6, TAB); //seq
            hideColumn(28, TAB); //mérnöki
            if (CH_FAMILY.isSelected()) {
                showColumn(8, 100, TAB);

            } else {
                hideColumn(8, TAB);
            }

            if (CH_STARTUP.isSelected()) {
                showColumn(9, 50, TAB);

            } else {
                hideColumn(9, TAB);
            }

            if (CH_DBPQTY.isSelected()) {
                showColumn(10, 50, TAB);

            } else {
                hideColumn(10, TAB);
            }
        } catch (ArrayIndexOutOfBoundsException e) {

        }
    }

    public void sumcalc() throws ArrayIndexOutOfBoundsException {
        if (TAB.getColumnCount() > 30) {
            for (int r = 0; r < TAB.getRowCount(); r++) {
                int SUM = 0;
                for (int c = 13; c < 28; c++) {
                    try {
                        if (!TAB.getValueAt(r, c).toString().equals("")) {
                            SUM += Integer.parseInt(TAB.getValueAt(r, c).toString());
                            if (Integer.parseInt(TAB.getValueAt(r, c).toString()) == 0) {
                                TAB.setValueAt("", r, c);
                            }
                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                }
                TAB.setValueAt(SUM, r, 30);

            }
        }
    }

    boolean isExistPlan(String JOBNAME, String PARTNUMBER, String SEQ) {

        DefaultTableModel MODEL = (DefaultTableModel) TAB.getModel();

        for (int R = 0; R < MODEL.getRowCount(); R++) {
            try {

                if (MODEL.getValueAt(R, 1).toString().equals(JOBNAME) && MODEL.getValueAt(R, 2).equals(PARTNUMBER) && MODEL.getValueAt(R, 6).toString().equals(SEQ) && MODEL.getValueAt(R, 12).toString().equals("Terv")) {
                    if (Integer.parseInt(MODEL.getValueAt(R, 13 + (COMBO_DAYS.getSelectedIndex() * 2) + COMBO_SHIFT.getSelectedIndex()).toString()) > 0) {
                        return true;
                    }
                }

            } catch (Exception e) {

            }
        }

        return false;

    }

    String getProdID(String JOBNAME, String PARTNUMBER, String SEQ) {

        DefaultTableModel MODEL = (DefaultTableModel) TAB.getModel();

        for (int R = 0; R < MODEL.getRowCount(); R++) {
            try {

                if (MODEL.getValueAt(R, 1).toString().equals(JOBNAME) && MODEL.getValueAt(R, 2).equals(PARTNUMBER) && MODEL.getValueAt(R, 6).toString().equals(SEQ) && MODEL.getValueAt(R, 12).toString().equals("Terv")) {
                    if (Integer.parseInt(MODEL.getValueAt(R, 13 + (COMBO_DAYS.getSelectedIndex() * 2) + COMBO_SHIFT.getSelectedIndex()).toString()) > 0) {
                        return MODEL.getValueAt(R, 0).toString();
                    }
                }

            } catch (Exception e) {

            }
        }

        return null;

    }

    String getProdQtyPHour(String JOBNAME, String PARTNUMBER, String SEQ) {

        DefaultTableModel MODEL = (DefaultTableModel) TAB.getModel();

        for (int R = 0; R < MODEL.getRowCount(); R++) {
            try {

                if (MODEL.getValueAt(R, 1).toString().equals(JOBNAME) && MODEL.getValueAt(R, 2).equals(PARTNUMBER) && MODEL.getValueAt(R, 6).toString().equals(SEQ) && MODEL.getValueAt(R, 12).toString().equals("Terv")) {
                    if (Integer.parseInt(MODEL.getValueAt(R, 13 + (COMBO_DAYS.getSelectedIndex() * 2) + COMBO_SHIFT.getSelectedIndex()).toString()) > 0) {
                        return MODEL.getValueAt(R, 10).toString();
                    }
                }

            } catch (Exception e) {

            }
        }

        return null;

    }

    String getProdMernoki(String JOBNAME, String PARTNUMBER, String SEQ) {

        DefaultTableModel MODEL = (DefaultTableModel) TAB.getModel();

        for (int R = 0; R < MODEL.getRowCount(); R++) {
            try {

                if (MODEL.getValueAt(R, 1).toString().equals(JOBNAME) && MODEL.getValueAt(R, 2).equals(PARTNUMBER) && MODEL.getValueAt(R, 6).toString().equals(SEQ) && MODEL.getValueAt(R, 12).toString().equals("Terv")) {
                    if (Integer.parseInt(MODEL.getValueAt(R, 13 + (COMBO_DAYS.getSelectedIndex() * 2) + COMBO_SHIFT.getSelectedIndex()).toString()) > 0) {
                        return MODEL.getValueAt(R, 28).toString();
                    }
                }

            } catch (Exception e) {

            }
        }

        return null;

    }

    String getProdFullQty(String JOBNAME, String PARTNUMBER, String SEQ) {

        DefaultTableModel MODEL = (DefaultTableModel) TAB.getModel();

        for (int R = 0; R < MODEL.getRowCount(); R++) {
            try {

                if (MODEL.getValueAt(R, 1).toString().equals(JOBNAME) && MODEL.getValueAt(R, 2).equals(PARTNUMBER) && MODEL.getValueAt(R, 6).toString().equals(SEQ) && MODEL.getValueAt(R, 12).toString().equals("Terv")) {
                    if (Integer.parseInt(MODEL.getValueAt(R, 13 + (COMBO_DAYS.getSelectedIndex() * 2) + COMBO_SHIFT.getSelectedIndex()).toString()) > 0) {
                        return MODEL.getValueAt(R, 10).toString();
                    }
                }

            } catch (Exception e) {

            }
        }

        return null;

    }

    private static boolean BTNQ = false;

    private void BTN_QUERYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_QUERYActionPerformed

        if (!BTNQ) {

            Runnable RUN = new Runnable() {

                @Override
                public void run() {

                    BTNQ = true;
                    if (!MkVez.GEST) {
                        if (RIPORT.getText().length() > 0) {
                            jButton2ActionPerformed(null);
                        }
                    }
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            BTN_QUERY.setIcon(new ImageIcon(mkvez.MkVez.class.getResource("IMG/loader.gif")));

                        }
                    });

                    Object value_station_type = MkVez.MYDB_DB.getCellValue("SELECT type FROM stations WHERE name='" + getName() + "'");
                    DefaultTableModel MODEL = PlanningWebsiteInterface.getPlan(getLineName(), Integer.parseInt(COMBO_YEAR.getSelectedItem().toString()), Integer.parseInt(COMBO_WEEK.getSelectedItem().toString()), value_station_type);

                    MODEL.addColumn("SUM");

                    TAB.setModel(MODEL);
                    sumcalc();
                    setTheme();
                    refreshDownTimes();

                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            BTN_QUERY.setIcon(null);
                        }
                    });

                    int index = 0;
                    for (int i = 0; i < MkVez.MW.TABBED.getTabCount(); i++) {
                        if (MkVez.MW.TABBED.getTitleAt(i).equals(getName().toUpperCase())) {
                            index = i;
                        }
                    }

                    String ref;
                    try {
                        ref = MkVez.MYDB_DB.getCellValue("SELECT refresh from stations where name='" + PlanForm.this.getName() + "';").toString();
                        refreshstring = ref;
                        LBL_REF.setText("Utolsó tervváltozás: " + ref);
                        MkVez.MW.TABBED.setIconAt(index, null);

                    } catch (Exception w) {

                    }

                    BTNQ = false;
                }
            };

            new Thread(RUN).start();

        } else {
            JOptionPane.showMessageDialog(this, "Még dolgozom, próbálja meg később!", "Figyelem!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BTN_QUERYActionPerformed

    private void QSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QSKeyReleased
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(TAB.getModel());

        TAB.setRowSorter(sorter);
        if (QS.getText().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(
                    RowFilter.regexFilter(QS.getText()));
        }
    }//GEN-LAST:event_QSKeyReleased

    private void CH_FAMILYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CH_FAMILYActionPerformed
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {

                setTheme();
            }
        });


    }//GEN-LAST:event_CH_FAMILYActionPerformed

    private void CH_DBPQTYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CH_DBPQTYActionPerformed
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                setTheme();
            }
        });
    }//GEN-LAST:event_CH_DBPQTYActionPerformed

    private void CH_STARTUPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CH_STARTUPActionPerformed
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                setTheme();
            }
        });
    }//GEN-LAST:event_CH_STARTUPActionPerformed

    private void CH_FAMILYMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CH_FAMILYMouseReleased


    }//GEN-LAST:event_CH_FAMILYMouseReleased

    private void CH_DBPQTYMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CH_DBPQTYMouseReleased


    }//GEN-LAST:event_CH_DBPQTYMouseReleased

    private void CH_STARTUPMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CH_STARTUPMouseReleased


    }//GEN-LAST:event_CH_STARTUPMouseReleased

    private void CH_FAMILYMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CH_FAMILYMouseClicked
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {

                setTheme();
            }
        });
    }//GEN-LAST:event_CH_FAMILYMouseClicked

    private void CH_DBPQTYMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CH_DBPQTYMouseClicked
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {

                setTheme();
            }
        });
    }//GEN-LAST:event_CH_DBPQTYMouseClicked

    private void CH_STARTUPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CH_STARTUPMouseClicked
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {

                setTheme();
            }
        });
    }//GEN-LAST:event_CH_STARTUPMouseClicked

    public void refreshDownTimes() {
        if (!construct) {

            DateTime start = MkVez.getFirstMondayDayOfWeek(Integer.parseInt(COMBO_YEAR.getSelectedItem().toString()), COMBO_WEEK.getSelectedIndex() + 1).plusHours(5);
            start = start.plusDays(COMBO_DAYS.getSelectedIndex());
            start = start.plusHours(COMBO_SHIFT.getSelectedIndex() * 12);
            DateTime stop = start.plusHours(12).minusSeconds(1);

            TAB_ALLASOK.setModel(PlanningWebsiteInterface.getDownTimes(linename, start, stop));

            hideColumn(0, TAB_ALLASOK);

            setHeaderName(1, "Sor", TAB_ALLASOK);
            setHeaderName(2, "Kezdés", TAB_ALLASOK);
            setHeaderName(3, "Befejezés", TAB_ALLASOK);
            setHeaderName(4, "Állás", TAB_ALLASOK);
            setHeaderName(5, "Javította", TAB_ALLASOK);
            setHeaderName(6, "Komment", TAB_ALLASOK);

            refreshRiport();
        }

    }

    public void refreshRiport() {
        DateTime start = MkVez.getFirstMondayDayOfWeek(Integer.parseInt(COMBO_YEAR.getSelectedItem().toString()), COMBO_WEEK.getSelectedIndex() + 1).plusHours(5);
        start = start.plusDays(COMBO_DAYS.getSelectedIndex());
        start = start.plusHours(COMBO_SHIFT.getSelectedIndex() * 12);
        DefaultTableModel model = PlanningWebsiteInterface.getRiport(linename, start);
        if (model != null) {
            if (model.getRowCount() > 0) {
                if (model.getValueAt(0, 0) != null) {
                    RIPORT.setText(model.getValueAt(0, 0).toString());
                } else {
                    RIPORT.setText("");
                }
            } else {
                RIPORT.setText("");
            }
        } else {
            RIPORT.setText("");
        }
    }


    private void COMBO_SHIFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_COMBO_SHIFTActionPerformed

        COMBO_FROM_H.removeAllItems();
        COMBO_TO_H.removeAllItems();

        int _COM = COMBO_SHIFT.getSelectedIndex();

        if (_COM == 0) {
            for (int h = 6; h < 18; h++) {
                COMBO_FROM_H.addItem(String.format("%02d", h));
                COMBO_TO_H.addItem(String.format("%02d", h));

            }
        } else {
            for (int h = 18; h < 24; h++) {
                COMBO_FROM_H.addItem(String.format("%02d", h));
                COMBO_TO_H.addItem(String.format("%02d", h));

            }
            for (int h = 0; h < 6; h++) {
                COMBO_FROM_H.addItem(String.format("%02d", h));
                COMBO_TO_H.addItem(String.format("%02d", h));

            }
        }

        refreshDownTimes();

    }//GEN-LAST:event_COMBO_SHIFTActionPerformed

    private void COMBO_DAYSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_COMBO_DAYSActionPerformed
        refreshDownTimes();
    }//GEN-LAST:event_COMBO_DAYSActionPerformed

    private void COMBO_WEEKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_COMBO_WEEKActionPerformed

    }//GEN-LAST:event_COMBO_WEEKActionPerformed

    public long getSumTerv(int day, int shift) {

        int col = 13;

        col = col + (day * 2) + shift;

        long val = 0;

        for (int r = 0; r < TAB.getRowCount(); r++) {
            if (TAB.getValueAt(r, 12).equals("Terv")) {
                try {
                    val += Long.parseLong(TAB.getValueAt(r, col).toString());
                } catch (Exception e) {

                }
            }
        }

        return val;

    }

    public long getSumTeny(int day, int shift) {

        int col = 13;

        col = col + (day * 2) + shift;

        long val = 0;

        for (int r = 0; r < TAB.getRowCount(); r++) {
            if (TAB.getValueAt(r, 12).equals("Tény")) {
                try {
                    val += Long.parseLong(TAB.getValueAt(r, col).toString());
                } catch (Exception e) {

                }
            }
        }

        return val;

    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!MkVez.GEST) {
            DateTime start = MkVez.getFirstMondayDayOfWeek(Integer.parseInt(COMBO_YEAR.getSelectedItem().toString()), COMBO_WEEK.getSelectedIndex() + 1).plusHours(5);

            start = start.plusDays(COMBO_DAYS.getSelectedIndex());
            start = start.plusHours(COMBO_SHIFT.getSelectedIndex() * 12);

            DateTime from = start.plusHours(COMBO_FROM_H.getSelectedIndex()).plusMinutes(COMBO_FROM_MIN.getSelectedIndex());
            DateTime to = start.plusHours(COMBO_TO_H.getSelectedIndex()).plusMinutes(COMBO_TO_MIN.getSelectedIndex());

            if (TXT_FIXED.getText() == null) {
                TXT_FIXED.setText("");
            }

            if (TEXT_COMMENT.getText() == null) {
                TEXT_COMMENT.setText("");
            }

            if (from.getMillis() >= to.getMillis()) {
                JOptionPane.showMessageDialog(this, "A kezdő dátumnak kisebbnek kell lennie mint a befejezés dátumának!", "Figyelem!", JOptionPane.ERROR_MESSAGE);
            } else {

                String command = "INSERT INTO downtimes_production (line,datefrom,dateto,downtimename,whofixed,comments) VALUE(";
                command += "'" + linename + "',";
                command += "'" + MkVez.formatDate(from) + "',";
                command += "'" + MkVez.formatDate(to) + "',";
                command += "'" + COMBO_DOWNTIME.getSelectedItem().toString() + "',";
                command += "'" + TXT_FIXED.getText() + "',";
                command += "'" + TEXT_COMMENT.getText() + "');";

                MkVez.MYDB_DB.insertCommand(command);

                TXT_FIXED.setText("");
                TEXT_COMMENT.setText("");

                refreshDownTimes();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ön vendégként lépett be, erre nem jogosult!", "Figyelem!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (TAB_ALLASOK.getSelectedRow() > -1) {
            String id = TAB_ALLASOK.getValueAt(TAB_ALLASOK.getSelectedRow(), 0).toString();
            MkVez.MYDB_DB.insertCommand("DELETE FROM downtimes_production WHERE id='" + id + "';");
            refreshDownTimes();
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void saveComment() {
        if (!MkVez.GEST) {

            DateTime start = MkVez.getFirstMondayDayOfWeek(Integer.parseInt(COMBO_YEAR.getSelectedItem().toString()), COMBO_WEEK.getSelectedIndex() + 1).plusHours(5);
            start = start.plusDays(COMBO_DAYS.getSelectedIndex());
            start = start.plusHours(COMBO_SHIFT.getSelectedIndex() * 12);

            String command = "INSERT INTO shift_riport (line,datum,riport) VALUES (";
            command += "'" + linename + "',";
            command += "'" + MkVez.formatDate(start) + "',";
            command += "'" + RIPORT.getText() + "')";
            command += " ON DUPLICATE KEY UPDATE riport='" + RIPORT.getText() + "'";

            if (RIPORT.getText().length() > 0) {
                MkVez.MYDB_DB.insertCommand(command);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Ön vendégként lépett be, erre nem jogosult!", "Figyelem!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        saveComment();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        StringBuilder SB = new StringBuilder();

        SB.append("<HTML>");
        SB.append("<BODY>");

        SB.append("Műszakjelentés: ").append(COMBO_YEAR.getSelectedItem().toString()).append(" - ").append(COMBO_WEEK.getSelectedItem().toString()).append(". hét, ").append(COMBO_DAYS.getSelectedItem().toString()).append(" - ").append(COMBO_SHIFT.getSelectedItem().toString()).append("<br>");
        SB.append("Sor: ").append(linename.toUpperCase()).append("<br>");
        SB.append("<br>");
        SB.append("<br>");
        SB.append("Szummázott darabszámok:").append("<br>");
        SB.append("Terv: ").append(getSumTerv(COMBO_DAYS.getSelectedIndex(), COMBO_SHIFT.getSelectedIndex())).append("<br>");
        SB.append("Tény: ").append(getSumTeny(COMBO_DAYS.getSelectedIndex(), COMBO_SHIFT.getSelectedIndex())).append("<br>");
        SB.append("<br>");
        SB.append("<br>");
        SB.append("Állásidők:").append("<br>");
        SB.append("+--------------------------------------------------------------------").append("<br>");
        int MIN = 0;
        for (int r = 0; r < TAB_ALLASOK.getRowCount(); r++) {
            //2-3
            try {
                MIN += Minutes.minutesBetween(MkVez.getDateTimeFromSQLDateString(TAB_ALLASOK.getValueAt(r, 2).toString()), MkVez.getDateTimeFromSQLDateString(TAB_ALLASOK.getValueAt(r, 3).toString())).getMinutes();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        SB.append("Állások összesen: ").append(MIN).append(" perc.").append("<br>");

        SB.append("<br>");
        SB.append("<TABLE>");
        SB.append("<TR>");
        SB.append("<TH ALIGN=\"CENTER\">");
        SB.append("Állás kezdete");
        SB.append("</TH>");
        SB.append("<TH ALIGN=\"CENTER\">");
        SB.append("Állás vége");
        SB.append("</TH>");
        SB.append("<TH ALIGN=\"CENTER\">");
        SB.append("Állás típusa");
        SB.append("</TH>");
        SB.append("<TH ALIGN=\"CENTER\">");
        SB.append("Javította");
        SB.append("</TH>");
        SB.append("<TH ALIGN=\"CENTER\">");
        SB.append("Komment");
        SB.append("</TH>");
        SB.append("<TH ALIGN=\"CENTER\">");
        SB.append("Állás idő (perc)");
        SB.append("</TH>");

        SB.append("</TR>");
        for (int r = 0; r < TAB_ALLASOK.getRowCount(); r++) {
            SB.append("<TR>");

            SB.append("<TD ALIGN=\"CENTER\">");
            try {
                SB.append(TAB_ALLASOK.getValueAt(r, 2).toString());
            } catch (Exception e) {
                SB.append("");

            }
            SB.append("</TD>");

            SB.append("<TD ALIGN=\"CENTER\">");
            try {
                SB.append(TAB_ALLASOK.getValueAt(r, 3).toString());
            } catch (Exception e) {
                SB.append("");

            }
            SB.append("</TD>");

            SB.append("<TD ALIGN=\"CENTER\">");
            try {
                SB.append(TAB_ALLASOK.getValueAt(r, 4).toString());
            } catch (Exception e) {
                SB.append("");

            }
            SB.append("</TD>");

            SB.append("<TD ALIGN=\"CENTER\">");
            try {
                SB.append(TAB_ALLASOK.getValueAt(r, 5).toString());
            } catch (Exception e) {
                SB.append("");

            }
            SB.append("</TD>");

            SB.append("<TD ALIGN=\"CENTER\">");
            try {
                SB.append(TAB_ALLASOK.getValueAt(r, 6).toString());
            } catch (Exception e) {
                SB.append("");

            }
            SB.append("</TD>");

            SB.append("<TD ALIGN=\"CENTER\">");
            try {
                SB.append(Minutes.minutesBetween(MkVez.getDateTimeFromSQLDateString(TAB_ALLASOK.getValueAt(r, 2).toString()), MkVez.getDateTimeFromSQLDateString(TAB_ALLASOK.getValueAt(r, 3).toString())).getMinutes());
            } catch (Exception e) {
                SB.append("");

            }
            SB.append("</TD>");

            SB.append("</TR>");
        }

        SB.append("</TABLE>");

        SB.append("<br>");
        SB.append("<br>");

        SB.append("Gyártások tételesen:").append("<br>");
        SB.append("+--------------------------------------------------------------------").append("<br>");

        SB.append("Tervezett tételek:").append("<br>");
        SB.append("<TABLE>");

        SB.append("<TR>");
        SB.append("<TH>");
        SB.append("JOB");
        SB.append("</TH>");
        SB.append("<TH>");
        SB.append("Partnumber");
        SB.append("</TH>");
        SB.append("<TH>");
        SB.append("Oldal");
        SB.append("</TH>");
        SB.append("<TH>");
        SB.append("Darab");
        SB.append("</TH>");
        SB.append("</TR>");

        int col = 13;

        col = col + (COMBO_DAYS.getSelectedIndex() * 2) + COMBO_SHIFT.getSelectedIndex();

        for (int r = 0; r < TAB.getRowCount(); r++) {
            if (TAB.getValueAt(r, 12).equals("Terv")) {
                try {
                    if (Integer.parseInt(TAB.getValueAt(r, col).toString()) > 0) {

                        SB.append("<TR>");
                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, 1).toString());
                        SB.append("</TD>");

                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, 2).toString());
                        SB.append("</TD>");

                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, 5).toString());
                        SB.append("</TD>");

                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, col).toString());
                        SB.append("</TD>");

                        SB.append("</TR>");

                    }
                } catch (Exception e) {

                }
            }
        }

        SB.append("</TABLE>");

        SB.append("<br>").append("<br>");
        SB.append("Gyártott tételek:").append("<br>");
        SB.append("<TABLE>");

        SB.append("<TR>");
        SB.append("<TH>");
        SB.append("JOB");
        SB.append("</TH>");
        SB.append("<TH>");
        SB.append("Partnumber");
        SB.append("</TH>");
        SB.append("<TH>");
        SB.append("Oldal");
        SB.append("</TH>");
        SB.append("<TH>");
        SB.append("Darab");
        SB.append("</TH>");
        SB.append("</TR>");

        col = 13;

        col = col + (COMBO_DAYS.getSelectedIndex() * 2) + COMBO_SHIFT.getSelectedIndex();

        for (int r = 0; r < TAB.getRowCount(); r++) {
            if (TAB.getValueAt(r, 12).equals("Tény")) {
                try {
                    if (Integer.parseInt(TAB.getValueAt(r, col).toString()) > 0) {

                        SB.append("<TR>");
                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, 1).toString());
                        SB.append("</TD>");

                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, 2).toString());
                        SB.append("</TD>");

                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, 5).toString());
                        SB.append("</TD>");

                        SB.append("<TD>");
                        SB.append(TAB.getValueAt(r, col).toString());
                        SB.append("</TD>");

                        SB.append("</TR>");

                    }
                } catch (Exception e) {

                }
            }
        }

        SB.append("</TABLE>");

        SB.append("<br>");
        SB.append("<br>");
        SB.append("Műszakvezetői komment:");
        SB.append("<br>");

        SB.append(RIPORT.getText().replace("\n", "<br>"));

        SB.append("<br>");
        SB.append("Üdvözlettel,");
        SB.append("<br>");
        SB.append(MkVez.NAME);
        SB.append("<br>");
        SB.append(MkVez.formatDate(new DateTime()));

        SB.append("</BODY>");

        SB.append("</HTML>");

        MAIL_BODY.setText(SB.toString());


    }//GEN-LAST:event_jButton3ActionPerformed

    private void BTN_MAILActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_MAILActionPerformed

        String ObjButtons[] = {"Igen", "Nem"};
        boolean mehet = true;

        if (MAILSEND) {
            ImageIcon sent = new ImageIcon(mkvez.MkVez.class.getResource("IMG/mail_sent.png"));
            int PromptResult = JOptionPane.showOptionDialog(this, "Ezt már elküldted! Szeretnéd újraküldeni?", "Figyelem!", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, sent, ObjButtons, ObjButtons[1]);
            if (PromptResult == JOptionPane.NO_OPTION) {
                mehet = false;
            }
        }

        if (mehet) {

            if (!MkVez.GEST) {

                int PromptResult = JOptionPane.showOptionDialog(this, "Biztos vagy benne hogy el akarod küldeni?", "Figyelem!", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, ObjButtons, ObjButtons[1]);
                if (PromptResult == JOptionPane.YES_OPTION) {

                    Object id = MkVez.MYDB_DB.getCellValue("SELECT id FROM cimlistak WHERE nev='SMT Muszakjelentes'");

                    DefaultTableModel cimlista = MkVez.MYDB_DB.getDataTableModel("SELECT emailid, email FROM mailescim,email WHERE cimlistaid='" + id + "' AND emailid=email.id");
                    String to = "";
                    for (int i = 0; i < cimlista.getRowCount(); i++) {
                        to += cimlista.getValueAt(i, 1) + ",";
                    }
                    if (to.length() > 0) {
                        to = to.substring(0, to.length() - 1);
                    }

                    EMAIL mail = new EMAIL();
                    mail.setFrom(MkVez.EMAIL);
                    String subject = MkVez.MW.TABBED.getTitleAt(MkVez.MW.TABBED.getSelectedIndex()).toUpperCase() + " sor/állomás   " + COMBO_WEEK.getSelectedItem().toString() + ". hét, " + COMBO_DAYS.getSelectedItem().toString() + " - " + COMBO_SHIFT.getSelectedItem().toString() + " [Műszakjelentés] / " + COMBO_YEAR.getSelectedItem().toString();
                    mail.setSubject(subject);

                    //to
                    mail.setTo(to);
                    mail.setMessage(MAIL_BODY.getText().replace("\n", "").replace("\"", "'"));

                    if (mail.send() == 1) {
                        MAILSEND = true;
                    }

                    if (MAILSEND) {
                        BTN_MAIL.setIcon(new ImageIcon(mkvez.MkVez.class.getResource("IMG/mail_sent.png")));

                    }

                }

            } else {
                JOptionPane.showMessageDialog(this, "Ön vendégként lépett be, erre nem jogosult!", "Figyelem!", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTN_MAILActionPerformed

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        if (!MkVez.GEST) {
            jButton2ActionPerformed(null);
        }

        int index = 0;

        for (int i = 0; i < MkVez.PLANS.size(); i++) {
            if (MkVez.PLANS.get(i).getName().toLowerCase().equals(this.getName().toLowerCase())) {
                MkVez.PLANS.remove(i);
            }
        }

        MkVez.MW.TABBED.remove(MkVez.MW.TABBED.getSelectedIndex());
    }//GEN-LAST:event_jLabel15MouseClicked

    private void TABMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TABMouseExited

    }//GEN-LAST:event_TABMouseExited

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        TAB.editingStopped(null);
        TAB.clearSelection();
    }//GEN-LAST:event_jPanel1MouseEntered

    private void PANELMKVEZMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PANELMKVEZMouseEntered
        TAB.editingStopped(null);
        TAB.clearSelection();
    }//GEN-LAST:event_PANELMKVEZMouseEntered

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        try {
            if (COMBO_FROM_H.getSelectedIndex() > COMBO_TO_H.getSelectedIndex()) {
                COMBO_TO_H.setSelectedIndex(COMBO_FROM_H.getSelectedIndex());
            } else {
                COMBO_TO_H.setSelectedIndex(COMBO_TO_H.getSelectedIndex() + 1);
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            COMBO_TO_H.setSelectedIndex(COMBO_TO_H.getSelectedIndex() - 1);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            if (COMBO_FROM_MIN.getSelectedIndex() > COMBO_TO_MIN.getSelectedIndex()) {
                COMBO_TO_MIN.setSelectedIndex(COMBO_FROM_MIN.getSelectedIndex());
            } else {
                COMBO_TO_MIN.setSelectedIndex(COMBO_TO_MIN.getSelectedIndex() + 1);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            COMBO_TO_MIN.setSelectedIndex(COMBO_TO_MIN.getSelectedIndex() - 1);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        PrintDialog dialog = new PrintDialog(null, true);

        dialog.setVisible((DefaultTableModel) TAB.getModel());

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        TEXT_COMMENT.setFont(new Font(TEXT_COMMENT.getFont().getName(), Font.PLAIN, TEXT_COMMENT.getFont().getSize() + 2));
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        TEXT_COMMENT.setFont(new Font(TEXT_COMMENT.getFont().getName(), Font.PLAIN, TEXT_COMMENT.getFont().getSize() - 2));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        TEXT_COMMENT.setText("");
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        RIPORT.setFont(new Font(RIPORT.getFont().getName(), Font.PLAIN, RIPORT.getFont().getSize() + 2));
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        RIPORT.setFont(new Font(RIPORT.getFont().getName(), Font.PLAIN, RIPORT.getFont().getSize() - 2));
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        RIPORT.setText("");
    }//GEN-LAST:event_jButton14ActionPerformed

    boolean isExistInPlan(String JOBNAME) {
        DefaultTableModel MODEL = (DefaultTableModel) TAB.getModel();
        for (int R = 0; R < MODEL.getRowCount(); R++) {
            try {
                if (MODEL.getValueAt(R, 1).toString().equals(JOBNAME)) {
                    return true;
                }
            } catch (NullPointerException e) {

            }
        }

        return false;
    }


    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed

        Runnable r = new Runnable() {
            @Override
            public void run() {

                boolean canwrite = true;

                DateTime start = MkVez.getFirstMondayDayOfWeek(Integer.parseInt(COMBO_YEAR.getSelectedItem().toString()), COMBO_WEEK.getSelectedIndex() + 1).plusHours(5);

                start = start.plusDays(COMBO_DAYS.getSelectedIndex());
                start = start.plusHours(COMBO_SHIFT.getSelectedIndex() * 12);

                //Állomás ID kinyerése
                Object STATIONID = MkVez.MYDB_DB.getCellValue("SELECT id from stations WHERE name='" + getName() + "';");

                DateTime end = start.plusHours(12).minusSeconds(1);

                //lekerdezzuk api bol a megvalosulast
                xmlfeldolg xxx = new xmlfeldolg();
                URL url = null;

                try {

                    String startstring = start.toString().replace(" ", "%20").replace("T", "%20").substring(0, start.toString().length() - 10);
                    String endstring = end.toString().replace(" ", "%20").replace("T", "%20").substring(0, start.toString().length() - 10);
                    url = new URL("http://143.116.140.120/rest/request.php?page=planning_realisation&product=&starttime=" + startstring + "&endtime=" + endstring + "&format=xml");
                    System.out.println(url.toString());
                } catch (MalformedURLException ex) {
                    Logger.getLogger(PlanForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                ArrayList<String> lista = new ArrayList();
//az xml adatinak beállítása        
                String nodelist = "planning_realisation";
                lista.add("Workstation");
                lista.add("Part_Number");
                lista.add("Pass");
                lista.add("Shop_Order_Number");
                lista.add("SUMPassQty");
                lista.add("move_qty");
                lista.add("manual_move_qty");
                try {
                    //lekérjük és átalakítjuk tömbbé
                    //System.out.println(getName());
                    Object sfdcadat[][] = (Object[][]) xxx.xmlfeldolg(url, nodelist, lista);

                    for (int R = 0; R < sfdcadat.length; R++) {
                        if (sfdcadat[R][3] != null) {
                            /*job keresés*/
                            //System.out.println("SFDC JOB találat... [" + sfdcadat[R][3] + "]");

                            if (isExistInPlan(sfdcadat[R][3].toString()) && sfdcadat[R][2].toString().equals("1") && getName().equalsIgnoreCase(sfdcadat[R][0].toString().substring(sfdcadat[R][0].toString().length() - 1))) {
                                /*ha van job és first pass és a sor is egyezik */
                                canwrite = true;
                                System.out.println("A JOB a tervben megtalálható...");

                                String JOBNAME = sfdcadat[R][3].toString();
                                String PARTNUMBER = sfdcadat[R][1].toString();
                                String PRODID = null;
                                Object WATERFALL = null;
                                String STARTDATE = MkVez.formatDate(start);
                                String QTYFULL = null;
                                String QTYPHOUR = null;
                                String MERNOKI = null;

                                int SEQ = 0;
                                int QTY = 0;

                                if (sfdcadat[R][0].toString().contains("PosAOI Bot")) {
                                    SEQ = 1;
                                } else if (sfdcadat[R][0].toString().contains("PosAOI Top")) {
                                    SEQ = 2;
                                }

                                try {
                                    QTY = Integer.parseInt(sfdcadat[R][4].toString());
                                } catch (Exception e) {

                                }

                                if (isExistPlan(JOBNAME, PARTNUMBER, Integer.toString(SEQ)) && SEQ > 0) {
                                    System.out.println("A Van rá beírt mennyiség erre a napra...");
                                    PRODID = getProdID(JOBNAME, PARTNUMBER, Integer.toString(SEQ));
                                    WATERFALL = MkVez.MYDB_DB.getCellValue("SELECT waterfall from " + MkVez.PLANTABLENAME + " WHERE prod_id='" + PRODID.toString() + "';");
                                    if (WATERFALL == null) {
                                        WATERFALL = "0";
                                    }

                                    QTYPHOUR = getProdQtyPHour(JOBNAME, PARTNUMBER, Integer.toString(SEQ));
                                    QTYFULL = getProdFullQty(JOBNAME, PARTNUMBER, Integer.toString(SEQ));
                                    MERNOKI = getProdMernoki(JOBNAME, PARTNUMBER, Integer.toString(SEQ));
                                } else {
                                    System.out.println("Nincs hozzá beírt mennyiség erre a napra...");
                                    System.out.println("Keresünk hozzá prodID-t...");

                                    String getquery = "SELECT * FROM " + MkVez.PLANTABLENAME + " WHERE job='" + JOBNAME + "' and partnumber='" + PARTNUMBER + "' and seq=" + Integer.toString(SEQ) + " and stationid=" + STATIONID + ";";

                                    try {
                                        Object[] record = MkVez.MYDB_DB.getRecord(getquery);

                                        PRODID = record[1].toString();
                                        WATERFALL = record[14].toString();
                                        QTYPHOUR = record[10].toString();
                                        QTYFULL = record[11].toString();
                                        MERNOKI = record[15].toString();

                                    } catch (Exception e) {
                                        canwrite = false;
                                    }

                                }
                                String insertquery = "INSERT INTO " + MkVez.PLANTABLENAME + " ("
                                        + "prod_id,"
                                        + "job,"
                                        + "partnumber,"
                                        + "seq,"
                                        + "stationid,"
                                        + "startdate,"
                                        + "qty_terv,"
                                        + "qty_teny,"
                                        + "startup,"
                                        + "qty_p_hour,"
                                        + "qty_full,"
                                        + "comments,"
                                        + "active,"
                                        + "waterfall,"
                                        + "mernoki"
                                        + ") VALUES ("
                                        + "'" + PRODID + "',"
                                        + "'" + JOBNAME + "',"
                                        + "'" + PARTNUMBER + "',"
                                        + Integer.toString(SEQ) + ","
                                        + STATIONID + ","
                                        + "'" + STARTDATE + "',"
                                        + "0" + ","
                                        + //terv    
                                        QTY + ","
                                        + 0 + ","
                                        + QTYPHOUR + ","
                                        + QTYFULL + ","
                                        + "''" + ","
                                        + "1" + ","
                                        + WATERFALL + ","
                                        + MERNOKI
                                        + ") ON DUPLICATE KEY ";

                                insertquery += " UPDATE qty_teny=" + QTY + ",active=1;";

                                // System.out.println(insertquery);
                                if (canwrite) {
                                    MkVez.MYDB_DB.insertCommand(insertquery);
                                }

                            }

                        }

                    }
                } catch (IOException ex) {
                    Logger.getLogger(PlanForm.class.getName()).log(Level.SEVERE, null, ex);

                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(PlanForm.class.getName()).log(Level.SEVERE, null, ex);

                } catch (SAXException ex) {
                    Logger.getLogger(PlanForm.class.getName()).log(Level.SEVERE, null, ex);

                } finally {
                    MkVez.ww.setVisible(false);
                }

                BTN_QUERYActionPerformed(null);
                //JOptionPane.showMessageDialog(this, query);
                //MkVez.ww.setVisible(false);
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        jButton15.setIcon(new ImageIcon(mkvez.MkVez.class.getResource("IMG/sanm16.png")));

                    }
                });

            }
        };

        Thread t = new Thread(r);
        t.start();
        //MkVez.ww.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                jButton15.setIcon(new ImageIcon(mkvez.MkVez.class.getResource("IMG/loader.gif")));

            }
        });
    }//GEN-LAST:event_jButton15ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_MAIL;
    private javax.swing.JButton BTN_QUERY;
    private javax.swing.JCheckBox CH_DBPQTY;
    private javax.swing.JCheckBox CH_FAMILY;
    private javax.swing.JCheckBox CH_STARTUP;
    private javax.swing.JComboBox COMBO_DAYS;
    private javax.swing.JComboBox COMBO_DOWNTIME;
    private javax.swing.JComboBox COMBO_FROM_H;
    private javax.swing.JComboBox COMBO_FROM_MIN;
    private javax.swing.JComboBox COMBO_SHIFT;
    private javax.swing.JComboBox COMBO_TO_H;
    private javax.swing.JComboBox COMBO_TO_MIN;
    private javax.swing.JComboBox COMBO_WEEK;
    private javax.swing.JComboBox COMBO_YEAR;
    private javax.swing.JLabel LBL_LINE;
    private javax.swing.JLabel LBL_REF;
    private javax.swing.JEditorPane MAIL_BODY;
    private javax.swing.JPanel MKVEZ_BAL;
    private javax.swing.JPanel MKVEZ_JOBB;
    private javax.swing.JPanel PANELMKVEZ;
    private javax.swing.JPopupMenu POPDOWN;
    private javax.swing.JTextField QS;
    public javax.swing.JTextArea RIPORT;
    private javax.swing.JTable TAB;
    private javax.swing.JTable TAB_ALLASOK;
    private javax.swing.JTable TAB_SFDC;
    private javax.swing.JTextArea TEXT_COMMENT;
    private javax.swing.JTextField TXT_FIXED;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    // End of variables declaration//GEN-END:variables
}
